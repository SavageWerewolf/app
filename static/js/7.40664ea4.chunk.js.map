{"version":3,"sources":["components/Block/styles.ts","components/Block/index.tsx","components/Form/index.tsx","components/Form/styles.ts","common/utils/useForm.tsx","common/utils/validationRules.ts","common/Input/styles.ts","common/Input/index.tsx"],"names":["Content","styled","Container","TextWrapper","withTranslation","title","content","t","id","useForm","validate","values","errors","handleChange","handleSubmit","ValidationType","type","ErrorMessage","direction","erros","justify","align","lg","md","sm","xs","autoComplete","onSubmit","span","Input","name","placeholder","value","qty","onChange","Button","ContactContainer","FormGroup","Span","ButtonContainer","require","config","useState","setValues","setErrors","shouldSubmit","useEffect","Object","keys","length","notification","message","description","event","persist","target","mintToken","redeemVoucher","contract","console","log","test","parseInt","hasOwnProperty","promo","process","promoCode","voucherJson","CryptoJS","AES","decrypt","toString","enc","Utf8","voucher","JSON","parse","maxRedeem","a","methods","getAvailableVoucher","call","availableVoucher","error","preventDefault","StyledInput"],"mappings":"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","file":"static/js/7.40664ea4.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const Content = styled(\"p\")`\r\n  margin-top: 1.5rem;\r\n`;\r\n\r\nexport const Container = styled(\"div\")`\r\n  position: relative;\r\n  max-width: 700px;\r\n`;\r\n\r\nexport const TextWrapper = styled(\"div\")`\r\n  border-radius: 3rem;\r\n  max-width: 400px;\r\n`;\r\n","import { withTranslation } from \"react-i18next\";\r\nimport { Container, TextWrapper, Content } from \"./styles\";\r\n\r\ninterface Props {\r\n  title: string;\r\n  content: any;\r\n  t: any;\r\n}\r\n\r\nconst Block = ({ title, content, t }: Props) => {\r\n  return (\r\n    <Container>\r\n      <h6>{t(title)}</h6>\r\n      <TextWrapper>\r\n        <Content>{t(content)}</Content>\r\n      </TextWrapper>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default withTranslation()(Block);\r\n","import { Row, Col } from \"antd\";\r\nimport { withTranslation } from \"react-i18next\";\r\nimport { Slide, Zoom } from \"react-awesome-reveal\";\r\nimport { FormProps, ValidationTypeProps } from \"./types\";\r\nimport { useForm } from \"../../common/utils/useForm\";\r\nimport validate from \"../../common/utils/validationRules\";\r\nimport { Button } from \"../../common/Button\";\r\nimport Block from \"../Block\";\r\nimport Input from \"../../common/Input\";\r\nimport TextArea from \"../../common/TextArea\";\r\nimport { ContactContainer, FormGroup, Span, ButtonContainer } from \"./styles\";\r\n\r\nconst Form = ({ title, content, id, t }: FormProps) => {\r\n  const { values, errors, handleChange, handleSubmit } = useForm(\r\n    validate\r\n  ) as any;\r\n\r\n  const ValidationType = ({ type }: ValidationTypeProps) => {\r\n    const ErrorMessage = errors[type];\r\n    return (\r\n      <Zoom direction=\"left\">\r\n        <Span erros={errors[type]}>{ErrorMessage}</Span>\r\n      </Zoom>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <ContactContainer id={id}>\r\n      <Row justify=\"space-between\" align=\"middle\">\r\n        <Col lg={12} md={11} sm={24} xs={24}>\r\n          <Slide direction=\"left\">\r\n            <Block title={title} content={content} />\r\n          </Slide>\r\n        </Col>\r\n        <Col lg={12} md={12} sm={24} xs={24}>\r\n          <Slide direction=\"right\">\r\n            <FormGroup autoComplete=\"off\" onSubmit={handleSubmit}>\r\n              <Col span={24}>\r\n                <p>aaaaaaaaaaaaaaaaaaaaaaaa</p>\r\n              </Col>\r\n              <Col span={24}>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"qty\"\r\n                  placeholder=\"Enter qty\"\r\n                  value={values.qty || 1}\r\n                  onChange={handleChange}\r\n                />\r\n                <ValidationType type=\"name\" />\r\n              </Col>\r\n\r\n              <ButtonContainer>\r\n                <Button name=\"submit\">{t(\"Mint\")}</Button>\r\n              </ButtonContainer>\r\n            </FormGroup>\r\n          </Slide>\r\n        </Col>\r\n      </Row>\r\n    </ContactContainer>\r\n  );\r\n};\r\n\r\nexport default withTranslation()(Form);\r\n","import styled from \"styled-components\";\r\n\r\nexport const ContactContainer = styled(\"div\")`\r\n  padding: 5rem 0;\r\n\r\n  @media only screen and (max-width: 1024px) {\r\n    padding: 3rem 0;\r\n  }\r\n`;\r\n\r\nexport const FormGroup = styled(\"form\")`\r\n  width: 100%;\r\n  max-width: 520px;\r\n\r\n  @media only screen and (max-width: 1045px) {\r\n    max-width: 100%;\r\n    margin-top: 2rem;\r\n  }\r\n`;\r\n\r\nexport const Span = styled(\"span\")<any>`\r\n  display: block;\r\n  font-weight: 600;\r\n  color: rgb(255, 130, 92);\r\n  height: 0.775rem;\r\n  padding: 0 0.675rem;\r\n`;\r\n\r\nexport const ButtonContainer = styled(\"div\")`\r\n  text-align: end;\r\n  position: relative;\r\n\r\n  @media only screen and (max-width: 414px) {\r\n    padding-top: 0.75rem;\r\n  }\r\n`;\r\n","import { useState, useEffect } from \"react\";\r\nimport { notification } from \"antd\";\r\nimport axios from \"axios\";\r\nimport {validateProps} from \"../types\"\r\nimport CryptoJS from 'crypto-js';\r\nrequire('dotenv').config();\r\n\r\nexport const useForm = (validate: any) => {\r\n  const [values, setValues] = useState({qty:\"0\"} as validateProps);\r\n  const [errors, setErrors] = useState({});\r\n  const [shouldSubmit, setShouldSubmit] = useState(false);\r\n\r\n  const openNotificationWithIcon = () => {\r\n    notification[\"success\"]({\r\n      message: \"Success\",\r\n      description: \"Your message has been sent!\",\r\n    });\r\n  };\r\n\r\n  const handleSubmit = (event: React.ChangeEvent<HTMLFormElement>, mintToken: (qty: number) => Promise<void>,\r\n   redeemVoucher: (qty: number, voucherCode: string) => Promise<void>, contract: any) => {\r\n    console.log(\"handleSubmit called\")\r\n\r\n    let errors = {} as validateProps;\r\n\r\n    console.log(values)\r\n    if (!values.qty) {\r\n      errors.qty = \"Quantity entered is a valid number!\";\r\n      setErrors(errors);\r\n  \r\n    } else{\r\n      if (!/^\\d+$/.test(values.qty) || (parseInt(values.qty) == 0) ){\r\n        errors.qty = \"Quantity entered is a valid number!\";\r\n        setErrors(errors);\r\n    \r\n      } else{\r\n        if ((parseInt(values.qty) > 10) ){\r\n          errors.qty = \"Max mint per transaction is 10!\";\r\n          setErrors(errors);\r\n        } else{\r\n          const qty = parseInt(values.qty)\r\n          if((values.hasOwnProperty('promo') && (values.promo?values.promo:\"\").length>0 || (process.env.REACT_APP_PROMO_CODE && process.env.REACT_APP_PROMO_CODE.length>0))){\r\n            const defaultpromo = process.env.REACT_APP_PROMO_CODE?process.env.REACT_APP_PROMO_CODE:\"\"\r\n            const promoCode = values.promo? values.promo:defaultpromo\r\n            const voucherJson = CryptoJS.AES.decrypt(promoCode,process.env.REACT_APP_ENCRYPTION_KEY?process.env.REACT_APP_ENCRYPTION_KEY: \"\" ).toString(CryptoJS.enc.Utf8)\r\n            try{\r\n              const voucher = JSON.parse(voucherJson)\r\n              console.log(voucherJson)\r\n              if(voucher.maxRedeem<qty){\r\n                errors.qty = \"Max promo redeem per transaction is \"+ voucher.maxRedeem+\"!\";\r\n                setErrors(errors); \r\n              }else{\r\n                const getAvailableVoucher = async(voucher:any)=>{\r\n                  const availableVoucher = await contract.methods.getAvailableVoucher(voucher).call()\r\n                  if(availableVoucher<qty){\r\n                    errors.qty = availableVoucher +\" redeemption left\";\r\n                    setErrors(errors);\r\n                  }else{\r\n                    redeemVoucher(qty, promoCode)\r\n                  }\r\n                }\r\n                getAvailableVoucher(voucher)\r\n              }\r\n            }catch(error){\r\n              errors.qty = \"OMG, fake promo code entered!\";\r\n              setErrors(errors);\r\n            }\r\n          }else{\r\n            mintToken(qty)\r\n          }\r\n        }\r\n      }\r\n    }\r\n    event.preventDefault();\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(errors).length === 0 && shouldSubmit) {\r\n      setValues({qty:\"0\"});\r\n      openNotificationWithIcon();\r\n    }\r\n  }, [errors, shouldSubmit]);\r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    event.persist();\r\n    setValues((values) => ({\r\n      ...values,\r\n      [event.target.name]: event.target.value,\r\n    }));\r\n    setErrors((errors) => ({ ...errors, [event.target.name]: \"\" }));\r\n  };\r\n\r\n  return {\r\n    handleChange,\r\n    handleSubmit,\r\n    values,\r\n    errors,\r\n  };\r\n};\r\n","import { validateProps } from \"../../common/types\";\r\n\r\nexport default function validate(values: validateProps) {\r\n  let errors = {} as validateProps;\r\n\r\n  console.log(values)\r\n  if (!values.qty) {\r\n    errors.qty = \"Quantity entered is a valid number!\";\r\n\r\n  } else if (!/\\d/.test(values.qty) || (parseInt(values.qty) == 0) ){\r\n    errors.qty = \"Quantity entered is a valid number!\";\r\n\r\n  } else if ((parseInt(values.qty) > 10) ){\r\n    errors.qty = \"Max mint per transaction is 10!\";\r\n\r\n  } \r\n  \r\n  console.log(\"validate: \"+ errors)\r\n  return errors;\r\n}\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled(\"div\")`\r\n  display: inline-block;\r\n  width: 100%;\r\n  padding: 10px 5px;\r\n`;\r\n\r\nexport const StyledInput = styled(\"input\")`\r\n  font-size: 1rem;\r\n`;\r\n","import { withTranslation } from \"react-i18next\";\r\nimport { Container, StyledInput } from \"./styles\";\r\nimport { Label } from \"../TextArea/styles\";\r\nimport { InputProps } from \"../types\";\r\n\r\nconst Input = ({ name, placeholder, onChange, t }: InputProps) => (\r\n  <Container>\r\n    {/* <Label htmlFor={name}>{t(name)}</Label> */}\r\n    <StyledInput\r\n      placeholder={t(placeholder)}\r\n      name={name}\r\n      id={name}\r\n      onChange={onChange}\r\n    />\r\n  </Container>\r\n);\r\n\r\nexport default withTranslation()(Input);\r\n"],"sourceRoot":""}